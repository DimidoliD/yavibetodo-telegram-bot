const express = require('express');
const { Telegraf } = require('telegraf');
const cors = require('cors');
const crypto = require('crypto');

const app = express();
const PORT = process.env.PORT || 3000;

// –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const BOT_TOKEN = '8127780450:AAHaerKpn5LKutGijkLsRIxdFloqG4hz9Eg';
const bot = new Telegraf(BOT_TOKEN);

// URL –≤–∞—à–µ–≥–æ –º–∏–Ω–∏-–∞–ø–ø
const MINI_APP_URL = 'https://dimidolid.github.io/yavibetodo-frontend/';

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const userData = new Map();
const sharedLists = new Map();

// Middleware
app.use(cors({
  origin: ['https://dimidolid.github.io', 'http://localhost:3000'],
  credentials: true
}));
app.use(express.json());

// Health check endpoint
app.get('/', (req, res) => {
  res.json({ 
    status: 'Ya Vi Be Todo Server is running!', 
    users: userData.size,
    features: ['categories', 'priorities', 'deadlines', 'subtasks', 'analytics', 'notifications', 'collaboration']
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram Web App –¥–∞–Ω–Ω—ã—Ö
function verifyTelegramWebAppData(telegramInitData) {
  try {
    const params = new URLSearchParams(telegramInitData);
    const hash = params.get('hash');
    params.delete('hash');
    
    const dataCheckString = Array.from(params.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([key, value]) => `${key}=${value}`)
      .join('\n');
    
    const secretKey = crypto.createHmac('sha256', 'WebAppData').update(BOT_TOKEN).digest();
    const calculatedHash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');
    
    return hash === calculatedHash;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö
function getUserFromTelegramData(telegramInitData) {
  try {
    const params = new URLSearchParams(telegramInitData);
    const userJson = params.get('user');
    if (!userJson) return null;
    
    return JSON.parse(decodeURIComponent(userJson));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createUser(telegramUser) {
  return {
    id: telegramUser.id,
    first_name: telegramUser.first_name,
    last_name: telegramUser.last_name,
    username: telegramUser.username,
    todos: [],
    categories: [
      { id: 1, name: '–†–∞–±–æ—Ç–∞', color: '#3b82f6', icon: 'üíº' },
      { id: 2, name: '–õ–∏—á–Ω–æ–µ', color: '#10b981', icon: 'üè†' },
      { id: 3, name: '–£—á–µ–±–∞', color: '#f59e0b', icon: 'üìö' },
      { id: 4, name: '–ó–¥–æ—Ä–æ–≤—å–µ', color: '#ef4444', icon: '‚ù§Ô∏è' }
    ],
    habits: [],
    preferences: {
      theme: 'auto',
      notifications: true,
      defaultPriority: 'medium',
      sortBy: 'created',
      viewMode: 'list'
    },
    stats: {
      totalCompleted: 0,
      streakDays: 0,
      lastActivity: new Date(),
      completedToday: 0,
      weeklyStats: []
    },
    sharedLists: [],
    created_at: new Date()
  };
}

// Webhook endpoint –¥–ª—è Telegram
app.use(bot.webhookCallback('/webhook'));

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const user = ctx.from;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  if (!userData.has(userId)) {
    userData.set(userId, createUser(user));
  }

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üìù –û—Ç–∫—Ä—ã—Ç—å Ya Vi Be Todo',
            web_app: { url: MINI_APP_URL }
          }
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }
        ]
      ]
    }
  };

  const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ya Vi Be Todo, ${user.first_name}!

üöÄ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:

‚úÖ –ó–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏  
üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üîî –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üë• –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞
üéØ –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–∏–≤—ã—á–µ–∫

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!`;

  ctx.reply(welcomeMessage, keyboard);
});

bot.action('stats', async (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (!user) {
    ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const total = user.todos.length;
  const completed = user.todos.filter(todo => todo.completed).length;
  const pending = total - completed;
  const completedToday = user.stats.completedToday;
  const streak = user.stats.streakDays;
  
  const statsMessage = `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${total}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completed}
‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${pending}
üî• –°–µ—Ä–∏—è: ${streak} –¥–Ω–µ–π
üìÖ –°–µ–≥–æ–¥–Ω—è: ${completedToday}

üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${total > 0 ? Math.round((completed / total) * 100) : 0}%

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏!`;

  ctx.editMessageText(statsMessage, {
    reply_markup: {
      inline_keyboard: [[
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
      ]]
    }
  });
  ctx.answerCbQuery();
});

bot.action('settings', async (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  const settingsMessage = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:

üé® –¢–µ–º–∞: ${user.preferences.theme === 'auto' ? '–ê–≤—Ç–æ' : user.preferences.theme === 'dark' ? '–¢–µ–º–Ω–∞—è' : '–°–≤–µ—Ç–ª–∞—è'}
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.preferences.notifications ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}
üìã –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ${user.preferences.sortBy === 'created' ? '–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è' : user.preferences.sortBy === 'priority' ? '–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É' : '–ü–æ –¥–µ–¥–ª–∞–π–Ω—É'}

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.`;

  ctx.editMessageText(settingsMessage, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: user.preferences.notifications ? 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'toggle_notifications' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    }
  });
  ctx.answerCbQuery();
});

bot.action('toggle_notifications', async (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  user.preferences.notifications = !user.preferences.notifications;
  userData.set(userId, user);
  
  ctx.answerCbQuery(user.preferences.notifications ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã');
  ctx.editMessageText(`‚úÖ ${user.preferences.notifications ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã'}`, {
    reply_markup: {
      inline_keyboard: [[
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'settings' }
      ]]
    }
  });
});

bot.action('back_to_main', async (ctx) => {
  const user = ctx.from;
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üìù –û—Ç–∫—Ä—ã—Ç—å Ya Vi Be Todo',
            web_app: { url: MINI_APP_URL }
          }
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }
        ]
      ]
    }
  };

  ctx.editMessageText(`üéâ Ya Vi Be Todo - ${user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard);
  ctx.answerCbQuery();
});

// API endpoints –¥–ª—è –º–∏–Ω–∏-–∞–ø–ø

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö
app.post('/api/user', (req, res) => {
  const { initData } = req.body;
  
  if (!initData) {
    // –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = {
      id: 12345,
      first_name: 'Test',
      last_name: 'User',
      username: 'testuser'
    };
    
    if (!userData.has(testUser.id)) {
      userData.set(testUser.id, createUser(testUser));
    }

    const user = userData.get(testUser.id);
    return res.json({
      user: {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        username: user.username
      },
      todos: user.todos,
      categories: user.categories,
      habits: user.habits,
      preferences: user.preferences,
      stats: user.stats
    });
  }

  // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
  const isValid = process.env.NODE_ENV === 'development' || verifyTelegramWebAppData(initData);
  
  if (!isValid) {
    return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram' });
  }

  const user = getUserFromTelegramData(initData);
  if (!user) {
    return res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }

  // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!userData.has(user.id)) {
    userData.set(user.id, createUser(user));
  }

  const userData_user = userData.get(user.id);
  res.json({
    user: {
      id: userData_user.id,
      first_name: userData_user.first_name,
      last_name: userData_user.last_name,
      username: userData_user.username
    },
    todos: userData_user.todos,
    categories: userData_user.categories,
    habits: userData_user.habits,
    preferences: userData_user.preferences,
    stats: userData_user.stats
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
app.post('/api/todos', (req, res) => {
  const { userId, text, priority = 'medium', categoryId, deadline, subtasks = [] } = req.body;
  
  if (!userId || !text) {
    return res.status(400).json({ error: 'UserId –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  const user = userData.get(parseInt(userId));
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  const newTodo = {
    id: Date.now(),
    text: text.trim(),
    completed: false,
    priority: priority,
    categoryId: categoryId || null,
    deadline: deadline || null,
    subtasks: subtasks.map((subtask, index) => ({
      id: Date.now() + index,
      text: subtask.trim(),
      completed: false
    })),
    createdAt: new Date().toISOString(),
    completedAt: null,
    timeSpent: 0,
    tags: [],
    comments: []
  };

  user.todos.push(newTodo);
  userData.set(parseInt(userId), user);
  
  res.json(newTodo);
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
app.put('/api/todos/:todoId', (req, res) => {
  const { todoId } = req.params;
  const { userId, completed, text, priority, categoryId, deadline, subtasks, timeSpent } = req.body;
  
  const user = userData.get(parseInt(userId));
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  const todoIndex = user.todos.findIndex(todo => todo.id === parseInt(todoId));
  if (todoIndex === -1) {
    return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }

  const todo = user.todos[todoIndex];
  const wasCompleted = todo.completed;

  if (completed !== undefined) {
    todo.completed = completed;
    if (completed && !wasCompleted) {
      todo.completedAt = new Date().toISOString();
      user.stats.totalCompleted++;
      user.stats.completedToday++;
    } else if (!completed && wasCompleted) {
      todo.completedAt = null;
      user.stats.totalCompleted = Math.max(0, user.stats.totalCompleted - 1);
      user.stats.completedToday = Math.max(0, user.stats.completedToday - 1);
    }
  }
  
  if (text !== undefined) todo.text = text.trim();
  if (priority !== undefined) todo.priority = priority;
  if (categoryId !== undefined) todo.categoryId = categoryId;
  if (deadline !== undefined) todo.deadline = deadline;
  if (subtasks !== undefined) todo.subtasks = subtasks;
  if (timeSpent !== undefined) todo.timeSpent = timeSpent;
  
  todo.updatedAt = new Date().toISOString();
  user.stats.lastActivity = new Date();
  
  userData.set(parseInt(userId), user);
  
  res.json(todo);
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
app.delete('/api/todos/:todoId', (req, res) => {
  const { todoId } = req.params;
  const { userId } = req.body;
  
  const user = userData.get(parseInt(userId));
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  const todoIndex = user.todos.findIndex(todo => todo.id === parseInt(todoId));
  if (todoIndex === -1) {
    return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }

  user.todos.splice(todoIndex, 1);
  userData.set(parseInt(userId), user);
  
  res.json({ success: true });
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
app.post('/api/categories', (req, res) => {
  const { userId, name, color, icon } = req.body;
  
  const user = userData.get(parseInt(userId));
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  const newCategory = {
    id: Date.now(),
    name: name.trim(),
    color: color || '#6366f1',
    icon: icon || 'üìù'
  };

  user.categories.push(newCategory);
  userData.set(parseInt(userId), user);
  
  res.json(newCategory);
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
app.delete('/api/categories/:categoryId', (req, res) => {
  const { categoryId } = req.params;
  const { userId } = req.body;
  
  const user = userData.get(parseInt(userId));
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  const categoryIndex = user.categories.findIndex(cat => cat.id === parseInt(categoryId));
  if (categoryIndex === -1) {
    return res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }

  user.categories.splice(categoryIndex, 1);
  userData.set(parseInt(userId), user);
  
  res.json({ success: true });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
app.put('/api/categories/:categoryId', (req, res) => {
  const { categoryId } = req.params;
  const { userId, name, color, icon } = req.body;
  
  const user = userData.get(parseInt(userId));
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  const categoryIndex = user.categories.findIndex(cat => cat.id === parseInt(categoryId));
  if (categoryIndex === -1) {
    return res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }

  if (name !== undefined) user.categories[categoryIndex].name = name.trim();
  if (color !== undefined) user.categories[categoryIndex].color = color;
  if (icon !== undefined) user.categories[categoryIndex].icon = icon;
  
  userData.set(parseInt(userId), user);
  
  res.json(user.categories[categoryIndex]);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
app.get('/api/analytics/:userId', (req, res) => {
  const userId = parseInt(req.params.userId);
  const { period = 'week' } = req.query;
  
  const user = userData.get(userId);
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  const now = new Date();
  const todos = user.todos;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categoryStats = user.categories.map(category => {
    const categoryTodos = todos.filter(todo => todo.categoryId === category.id);
    return {
      category: category,
      total: categoryTodos.length,
      completed: categoryTodos.filter(todo => todo.completed).length,
      pending: categoryTodos.filter(todo => !todo.completed).length
    };
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
  const priorityStats = ['high', 'medium', 'low'].map(priority => ({
    priority,
    total: todos.filter(todo => todo.priority === priority).length,
    completed: todos.filter(todo => todo.priority === priority && todo.completed).length
  }));

  // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const timeStats = {
    totalTimeSpent: todos.reduce((sum, todo) => sum + (todo.timeSpent || 0), 0),
    avgTimePerTask: todos.length ? todos.reduce((sum, todo) => sum + (todo.timeSpent || 0), 0) / todos.length : 0,
    completedToday: user.stats.completedToday,
    streak: user.stats.streakDays
  };

  res.json({
    overview: {
      total: todos.length,
      completed: todos.filter(todo => todo.completed).length,
      pending: todos.filter(todo => !todo.completed).length,
      overdue: todos.filter(todo => !todo.completed && todo.deadline && new Date(todo.deadline) < now).length
    },
    categoryStats,
    priorityStats,
    timeStats,
    trends: user.stats.weeklyStats || []
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
app.put('/api/preferences/:userId', (req, res) => {
  const userId = parseInt(req.params.userId);
  const preferences = req.body;
  
  const user = userData.get(userId);
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  user.preferences = { ...user.preferences, ...preferences };
  userData.set(userId, user);
  
  res.json(user.preferences);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
});

app.use((error, req, res, next) => {
  console.error('Server error:', error);
  res.status(500).json({ error: 'Internal server error' });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
async function setupWebhook() {
  try {
    const webhookUrl = `${process.env.RENDER_EXTERNAL_URL}/webhook`;
    await bot.telegram.setWebhook(webhookUrl);
    console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`üöÄ Ya Vi Be Todo Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± Mini App URL: ${MINI_APP_URL}`);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  if (process.env.NODE_ENV === 'production') {
    await setupWebhook();
  } else {
    console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling');
    bot.launch();
  }
});

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
